Kurt
Tessa
Chris
Charlie
Jean

CMMI is Capability Maturity Model Integration, describing how an organization develops a model, based on the ability of the organization. It is a set of best practices used in organizations to improve processes and enhance quality.

Requirements: constraints and expectations for a project, unrealistic ideas get eliminated, customer relations, 1st phase of the lifecycle, determines what you will design, textual descriptions, separate needs between functional and non-functional. 

Design: the process of finding a solution to the problem, risk assessment, iteration of designs, code scaffolding, architectural design, eliminating what won't be used, textual and graphical documentation, delegating responsibilities, research products to use in implementation, Design Method, narrow focus

Implementation: Coding a solution based on requirements. Includes: Make available for multiple operating systems (or just the one in the requirements), performance/testing of code, documentation, code refactoring, create traceability matrix tying solution to requirements, project management, and CODE!

Test: Verify that the implementation meets the requirements. Involves quality assurance, error handling, and user testing. creating test documents detailing cases.

Release: Often done in multiple phases, depending on how finished the project is, reliease not only deals with distribution but also usability; release notes/README file, advertising, master repository "finished" and built, distribute to end user.

Support/Maintenance: occurs once the product is available and describes the process of patching the product, bug fixing, customer support, resource support, release/patch notes, minor changes, patches, user feedback, platform for delivering patch notes 

Updates: Repeat the lifecycle to add new features. Includes: iterate back through lifecycle, continued development, think of new features.
