Break up into teams; ~7 each. 
Each team will add their design document to the GitHub shared repository at the end of class (Design/<team name>). Include the names of all the members. 

Perform a requirements analysis.
	Which are mandatory and which are optional?
 	Which ones involve risk (in terms of size of effort or skills required or technology required)? Can these be negotiated? Can you suggest alternatives that meet the intent?
	Do you need clarification on any (to get the words behind the words)?

What is the system level data model in this scenario?
What is the architectural design, based on the constraints?
Who are the actors and major objects? 
What are their critical attributes and behaviors? (i.e. class diagram)
Make any state diagrams for these.
Make activity diagrams for critical threads through the system (you can use Raptor or a tool of your choice)
Make a sequence diagram for the application that shows the actors and objects involved in the critical events of the product.

SO, how do you start? Refer back to Problem Solving… Break the problem (which is to generate a design document by the end of class) down into smaller more solvable problems. A problem with a straightforward solution is a task, not a problem. 
Secondly, the team can work together on each piece or you can divide up into sub teams (if you divide up, I recommend doing an initial brainstorming so each sub team is operating within the same context).

To help you get started, I’ve already created the Requirements document (ScavengeRUs Tier 2) and the Problem Identification and Definition (PID) document (BucHunt Iteration 1_1 PID) for you and placed them in the shared repository (just sync your fork to see them). 
As you look at these documents, compare how these are written and presented to what you generated in the Requirements exercise.
And, yes, there are missing elements to the PID but you have enough to get started and to give you examples.

To help with time management, if you have questions, collect them and reach out when you have 5 unless one of them is stopping you from moving forward at all (simulates an semi-available customer).

